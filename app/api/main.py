import logging
import json
from pathlib import Path
from contextlib import asynccontextmanager

from fastapi import FastAPI
from fastapi.openapi.utils import get_openapi

from app.api.routes import init_app
from app.services.fpl_client import aclose_client
from app.util.models import HealthResponse


logger = logging.getLogger("fpl-mcp")


@asynccontextmanager
async def lifespan(app: FastAPI):
    logger.info("Starting FPL MCP server...")
    try:
        yield
    finally:
        logger.info("Closing FPL HTTP client...")
        await aclose_client()


app = FastAPI(
    title="FPL MCP Server",
    version="0.1.0",
    description=(
        "Fantasy Premier League MCP-compatible server exposing bootstrap, fixtures, and manager tools."
    ),
    lifespan=lifespan,
)


@app.get("/health", response_model=HealthResponse, tags=["health"])
def health() -> HealthResponse:
    return HealthResponse(status="ok")


# Register routers and middleware
init_app(app)


def _custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    # Try to load a provided openapi.json at project root if present
    schema_path = Path(__file__).resolve().parents[2] / "openapi.json"
    if schema_path.exists():
        with schema_path.open("r", encoding="utf-8") as f:
            app.openapi_schema = json.load(f)
            return app.openapi_schema
    # Fallback to autogenerated schema
    app.openapi_schema = get_openapi(
        title=app.title or "API",
        version=app.version or "0.1.0",
        description=app.description or None,
        routes=app.routes,
    )
    return app.openapi_schema


app.openapi = _custom_openapi  # type: ignore[assignment]
